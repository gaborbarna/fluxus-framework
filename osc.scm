(require mzlib/string)
    
(define (osc-repl)
  (cond ((osc-msg "/code")
         (with-handlers ([exn:fail? (lambda (exn) 'eval-error)])
           (map eval (read-from-string-all (osc 0)))))
        ((osc-msg "/spawn-task")
         (let ([task-name (read (open-input-string (osc 0)))])
           (with-handlers ([exn:fail? (lambda (exn) 'spawn-error)])
             (spawn-task (eval task-name) task-name))))
        ((osc-msg "/rm-task")
         (with-handlers ([exn:fail? (lambda (exn) 'rm-task-error)])
           (rm-task (read (open-input-string (osc 0))))))
        ((osc-msg "/rm-all-tasks")
         (rm-all-tasks)
         (spawn-task osc-repl 'osc-repl))
        ((osc-msg "/clear")
         (clear)
         (load "camera.flx"))
        ((osc-msg "/load")
         (with-handlers ([exn:fail? (lambda (exn) 'load-error)])
             (load (osc 0))))
        ((osc-msg "/ping")
         (begin (display "ping")
                (newline)))))     

(osc-source "34343")
(spawn-task osc-repl 'osc-repl)
(load "camera.flx")
